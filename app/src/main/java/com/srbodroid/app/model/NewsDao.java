package com.srbodroid.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.srbodroid.app.model.News;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NEWS.
*/
public class NewsDao extends AbstractDao<News, Long> {

    public static final String TABLENAME = "NEWS";

    /**
     * Properties of entity News.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Link = new Property(2, String.class, "link", false, "LINK");
        public final static Property CommentsLink = new Property(3, String.class, "commentsLink", false, "COMMENTS_LINK");
        public final static Property CommentsFeedLink = new Property(4, String.class, "commentsFeedLink", false, "COMMENTS_FEED_LINK");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property Author = new Property(7, String.class, "author", false, "AUTHOR");
        public final static Property PubDate = new Property(8, Long.class, "pubDate", false, "PUB_DATE");
        public final static Property Category = new Property(9, String.class, "category", false, "CATEGORY");
        public final static Property Comment_count = new Property(10, Long.class, "comment_count", false, "COMMENT_COUNT");
    };

    private DaoSession daoSession;


    public NewsDao(DaoConfig config) {
        super(config);
    }
    
    public NewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NEWS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'LINK' TEXT," + // 2: link
                "'COMMENTS_LINK' TEXT," + // 3: commentsLink
                "'COMMENTS_FEED_LINK' TEXT," + // 4: commentsFeedLink
                "'DESCRIPTION' TEXT," + // 5: description
                "'CONTENT' TEXT," + // 6: content
                "'AUTHOR' TEXT," + // 7: author
                "'PUB_DATE' INTEGER," + // 8: pubDate
                "'CATEGORY' TEXT," + // 9: category
                "'COMMENT_COUNT' INTEGER);"); // 10: comment_count
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NEWS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, News entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(3, link);
        }
 
        String commentsLink = entity.getCommentsLink();
        if (commentsLink != null) {
            stmt.bindString(4, commentsLink);
        }
 
        String commentsFeedLink = entity.getCommentsFeedLink();
        if (commentsFeedLink != null) {
            stmt.bindString(5, commentsFeedLink);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(8, author);
        }
 
        Long pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindLong(9, pubDate);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(10, category);
        }
 
        Long comment_count = entity.getComment_count();
        if (comment_count != null) {
            stmt.bindLong(11, comment_count);
        }
    }

    @Override
    protected void attachEntity(News entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public News readEntity(Cursor cursor, int offset) {
        News entity = new News( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // link
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // commentsLink
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // commentsFeedLink
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // author
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // pubDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // category
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // comment_count
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, News entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLink(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommentsLink(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCommentsFeedLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAuthor(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPubDate(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setCategory(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setComment_count(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(News entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(News entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
